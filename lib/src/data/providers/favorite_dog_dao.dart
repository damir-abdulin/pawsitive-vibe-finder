import 'package:drift/drift.dart';

import '../entities/entities.dart';
import 'database.dart';

part 'favorite_dog_dao.g.dart';

/// Data Access Object for favorite dogs.
///
/// This class defines the interface for performing CRUD operations on the
/// 'favorite_dogs' table. The actual implementation is generated by Drift.
@DriftAccessor(tables: <Type>[FavoriteDogs])
class FavoriteDogDao extends DatabaseAccessor<AppDatabase>
    with _$FavoriteDogDaoMixin {
  /// Creates a [FavoriteDogDao] instance.
  FavoriteDogDao(super.attachedDatabase);

  /// Watches all favorite dogs in the database.
  ///
  /// Returns a stream that emits a new list of favorite dogs whenever the
  /// data in the 'favorite_dogs' table changes.
  Stream<List<FavoriteDogEntity>> watchFavoriteDogs() =>
      select(favoriteDogs).watch();

  /// Inserts a new favorite dog into the database.
  Future<void> insertFavoriteDog(FavoriteDogEntity favorite) =>
      into(favoriteDogs).insert(favorite, mode: InsertMode.replace);

  /// Deletes a favorite dog from the database.
  Future<void> deleteFavoriteDog(FavoriteDogEntity favorite) => (delete(
    favoriteDogs,
  )..where(($FavoriteDogsTable tbl) => tbl.imageUrl.equals(favorite.imageUrl))).go();
}
